// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             String             @default("student")
  active           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  accounts         Account[]
  sessions         Session[]
  exerciseAttempts ExerciseAttempt[]
  exerciseProgress ExerciseProgress[]
  moduleProgress   ModuleProgress[]
  studentProfile   StudentProfile?    @relation("UserToStudentProfile")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudentProfile {
  id          String       @id @default(cuid())
  user        User         @relation("UserToStudentProfile", fields: [userId], references: [id])
  userId      String       @unique
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Language {
  id          String       @id @default(cuid())
  name        String       @unique
  code        String       @unique
  exercises   Exercise[]   @relation("LanguageToExercise")
  enrollments Enrollment[] @relation("LanguageToEnrollment")
}

model Level {
  id          String       @id @default(cuid())
  name        String       @unique
  code        String       @unique
  exercises   Exercise[]   @relation("LevelToExercise")
  enrollments Enrollment[] @relation("LevelToEnrollment")
}

model Enrollment {
  id               String         @id @default(cuid())
  student          StudentProfile @relation(fields: [studentProfileId], references: [id])
  studentProfileId String
  language         Language       @relation("LanguageToEnrollment", fields: [languageId], references: [id])
  languageId       String
  level            Level          @relation("LevelToEnrollment", fields: [levelId], references: [id])
  levelId          String
  status           String         @default("ACTIVE")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([studentProfileId])
  @@index([languageId])
  @@index([levelId])
}

model Module {
  id             String           @id @default(cuid())
  name           String
  description    String?
  order          Int
  exercises      Exercise[]       @relation("ModuleToExercise")
  moduleProgress ModuleProgress[] @relation("ModuleToModuleProgress")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Exercise {
  id          String             @id @default(cuid())
  title       String
  description String
  content     String
  type        String // reading, listening, dictation
  audioUrl    String?           // URL do arquivo de áudio
  voiceId     String?           // ID da voz usada para gerar o áudio
  languageId  String
  levelId     String
  moduleId    String?
  module      Module?            @relation("ModuleToExercise", fields: [moduleId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  language    Language           @relation("LanguageToExercise", fields: [languageId], references: [id])
  level       Level              @relation("LevelToExercise", fields: [levelId], references: [id])
  attempts    ExerciseAttempt[]
  progress    ExerciseProgress[] @relation("ExerciseToProgress")
  questions   Question[]         @relation("ExerciseToQuestion")

  @@index([languageId])
  @@index([levelId])
  @@index([moduleId])
}

model ExerciseAttempt {
  id          String    @id @default(cuid())
  userId      String
  exerciseId  String
  score       Float
  completed   Boolean   @default(false)
  answers     String // JSON string
  duration    Int       @default(0) // Duração em minutos
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])

  @@index([userId])
  @@index([exerciseId])
}

model ExerciseProgress {
  id         String    @id @default(cuid())
  userId     String
  exerciseId String
  status     String    @default("NOT_STARTED")
  score      Float?
  attempts   Int       @default(0)
  answers    String?   // JSON string of answers
  startedAt  DateTime  @default(now())
  finishedAt DateTime?
  user       User      @relation(fields: [userId], references: [id])
  exercise   Exercise  @relation("ExerciseToProgress", fields: [exerciseId], references: [id])

  @@unique([userId, exerciseId])
  @@index([userId])
  @@index([exerciseId])
}

model ModuleProgress {
  id        String @id @default(cuid())
  userId    String
  moduleId  String
  progress  Float  @default(0)
  completed Int    @default(0)  // Number of completed exercises
  total     Int    @default(0)  // Total number of attempts
  user      User   @relation(fields: [userId], references: [id])
  module    Module @relation("ModuleToModuleProgress", fields: [moduleId], references: [id])

  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

model Question {
  id            String   @id @default(cuid())
  exerciseId    String
  question      String
  options       String // JSON string of options array
  correctAnswer String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  exercise      Exercise @relation("ExerciseToQuestion", fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
}
